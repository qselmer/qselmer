bib = RefManageR::ReadBib("assets/Articles.bib")
install.packages("RefManageR")
install.packages("RefManageR")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(htmltools)
library(magrittr)
install.packages("RefManageR")
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
bib = RefManageR::ReadBib("assets/Articles.bib")
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
getwd()
setwd("J:/.qselmer/.me_profiles/qselmer")
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
bib
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
bib
# get the unique journals I've published in based on bib file
# useful for filtering Google Scholar results later
my_journals = unique(unlist(lapply(bib, function(x) x$journal)))
my_journals
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
bib
# load the bibliography. Article summaries depend on this
bib = RefManageR::ReadBib("assets/Articles.bib")
bib
# get the unique journals I've published in based on bib file
# useful for filtering Google Scholar results later
my_journals = unique(unlist(lapply(bib, function(x) x$journal)))
my_journals
# scrape my publications data from google scholar
my_pubs = scholar::get_publications("wz83egoAAAAJ")
my_pubs
# scrape my publications data from google scholar
my_pubs = scholar::get_publications("wz83egoAAAAJ")
# keep only entries that share a journal with those found in my bib file
# this keeps only peer-reviewed articles found on google scholar and in bib
my_pubs = my_pubs
# my_pubs = my_pubs[my_pubs$journal %in% my_journals,]
# replace any punctuation with a space: easier fuzzy matching later
my_pubs$title = stringr::str_replace_all(my_pubs$title, "[:punct:]", " ")
my_pubs
bib
# replace any punctuation with a space: easier fuzzy matching later
my_pubs$title = stringr::str_replace_all(my_pubs$title, "[:punct:]", " ")
my_pubs
str(my_pubs)
bib
my_pubs <- as.data.frame(bib)
my_pubs
# keep only entries that share a journal with those found in my bib file
# this keeps only peer-reviewed articles found on google scholar and in bib
my_pubs = as.data.frame(bib)
str(my_pubs)
# keep only entries that share a journal with those found in my bib file
# this keeps only peer-reviewed articles found on google scholar and in bib
my_pubs = as.data.frame(bib)[, -1]
my_pubs
my_pubs <- my_pubs[, c("title", "author", "journal", "year")]
my_pubs
my_pubs
# scrape my publications data from google scholar
my_pubs = scholar::get_publications("wz83egoAAAAJ")
my_pubs
names(my_pubs)
# scrape my publications data from google scholar
my_pubs = scholar::get_publications("wz83egoAAAAJ")
# keep only entries that share a journal with those found in my bib file
# this keeps only peer-reviewed articles found on google scholar and in bib
my_pubs = as.data.frame(bib)[, -1]
my_pubs <- my_pubs[, c("title", "author", "journal", "year")]
# my_pubs = my_pubs[my_pubs$journal %in% my_journals,]
# replace any punctuation with a space: easier fuzzy matching later
my_pubs$title = stringr::str_replace_all(my_pubs$title, "[:punct:]", " ")
my_pubs
# any string in this vector will be converted to italics
# in the article details portion of the output
em_words = c(
"Engraulis ringens",
"Piscine orthoreovirus"
)
# create HTML code to build the greeting header
tagList(
h2("Quantitative Ecology and Fisheries Scientist", align = 'center'),
p(em("My research interests focus on theoretical and applied issues in marine resource ecology and their management. This includes developing  population and community dynamics models, stock assessments, spatio-temporal analyses, and life history analyses. Specifically, I like to integrate scientific programming with the latest advances in statistical modeling to respond to changes in the structure and functioning of marine ecosystems and populations 🌊📚💻"), align = 'center')
)
p(em("Click the title of each article to see more information."), open_lock_img, em("and"), lock_img, em("denote open-access and paywall articles, respectively."))
my_em = function(x) {
for (i in 1:length(em_words)) {
x = stringr::str_replace_all(x, em_words[i], paste0("<em>", em_words[i], "</em>"))
}
return(x)
}
# my_name_strong = function(x) {
#   stringr::str_replace(x, "B. A. Staton", "<strong>B. A. Staton</strong>") %>%
#     stringr::str_replace("Staton, B. A,", "<strong>Staton, B. A,</strong>") %>%
#     stringr::str_replace("Staton, B,", "<strong>Staton, B,</strong>") %>%
#     stringr::str_replace("B. Staton", "<strong>B. Staton</strong>")
# }
prep_bibentry = function(key) {
this_bib = bib[key]
# create a "pretty citation" from the bibentry
old_opts = RefManageR::BibOptions()
on.exit(RefManageR::BibOptions(old_opts))
RefManageR::BibOptions(max.names = 20, style = "text", bib.style = "authoryear", dashed = FALSE)
str_bib = format(this_bib)
# remove any line breaks portion
str_bib = stringr::str_replace_all(str_bib, "\\n",  " ")
str_bib = stringr::str_replace_all(str_bib, "\\\\textendash ",  "&#8211;")
str_bib = stringr::str_remove_all(str_bib, "_")
# extract author list: do it this way so first and middle names are abbreviated
authors = stringr::str_extract(str_bib, "^.+\\([:digit:]") %>%
stringr::str_remove(" \\([:digit:]")
# extract the title: do it this way so capitalization and {} are handled properly
# title = stringr::str_extract(str_bib, "“.+”") %>%
#   substr(2, nchar(.)-1)
title = stringr::str_extract(str_bib, "\\). .+In\\:") %>%
stringr::str_remove("\\). ") %>%
stringr::str_remove(" In\\:$") %>%
substr(2,nchar(.)-2)
# extract the abstract from online
# abstract = tryCatch(rcrossref::cr_abstract(this_bib$doi), error = function(e) "Abstract not found on CrossRef. Consult the DOI link shown above for the abstract.")
abstract = this_bib$abstract
abstract = stringr::str_replace_all(abstract, "\\\\textendash ",  "&#8211;")
abstract = stringr::str_replace_all(abstract, "\\\\textdegree ",  "&#176;")
abstract = stringr::str_replace_all(abstract, "``",  '"')
abstract = stringr::str_replace_all(abstract, "''",  '"')
abstract = stringr::str_replace_all(abstract, "O2 kg-1h-1", "O<sub>2</sub> kg<sup>-1</sup>h<sup>-1</sup>")
abstract = stringr::str_replace_all(abstract, "Topt", "<em>T</em><sub>opt</sub>")
abstract = stringr::str_replace_all(abstract, "Tlow", "<em>T</em><sub>low</sub>")
abstract = stringr::str_replace_all(abstract, "Tup", "<em>T</em><sub>up</sub>")
abstract = stringr::str_replace_all(abstract, "Tbreadth", "<em>T</em><sub>breadth</sub>")
abstract = stringr::str_replace_all(abstract, "\\{\\$<\\$\\}", "&#60;")
abstract = stringr::str_replace_all(abstract, "\\\\%", "%")
# obtain the citation count: cross ref
cites_crossref = rcrossref::cr_citation_count(this_bib$doi)$count
cites_crossref = ifelse(is.null(cites_crossref), NA, cites_crossref)
# obtain the citation count: google scholar
title_join = stringr::str_replace_all(title, "&#8211;", "–")
title_join = stringr::str_replace_all(title_join, "[:punct:]", " ")
cites_gscholar = my_pubs[stringdist::amatch(tolower(title_join), tolower(my_pubs$title)),"cites"]
# build the output list
list(
authors = authors,
title = title,
year = this_bib$year,
journal = this_bib$journal,
volume = this_bib$volume,
number = this_bib$number,
pages = this_bib$pages,
doi = this_bib$doi,
abstract = abstract,
cites_crossref = cites_crossref,
cites_gscholar = cites_gscholar
)
}
build_journal_name = function(bib_data) {
em(paste0(bib_data$journal, ","))
}
build_journal_info = function(bib_data) {
volume_use = ifelse(!is.null(bib_data$volume), bib_data$volume, "")
number_use = ifelse(!is.null(bib_data$number), paste0("(", bib_data$number, ")"), "")
pages_use = ifelse(!is.null(bib_data$pages), bib_data$pages, "")
pages_use = stringr::str_replace(pages_use, "--", "-")
number_pages_sep = ifelse(pages_use == "", "", ": ")
out = paste0(volume_use, number_use, number_pages_sep, pages_use)
if (out == "") {
out = "In Press"
}
return(out)
}
build_doi_badge = function(doi) {
if (!is.null(doi)) {
url = paste0("https://doi.org/", doi)
badge = paste0("https://zenodo.org/badge/DOI/", doi, ".svg")
a(href = url, img(src = badge, alt = "DOI"))
}
}
article_details = function(key, open_access = FALSE, code_repo = NULL, code_doi = NULL) {
# prepare the bibliographic data
bib_data = prep_bibentry(key)
# set the lock image to use
if (open_access) {
lock_use = open_lock_img
} else {
lock_use = lock_img
}
if (!is.null(code_repo)) {
repo = tagList(strong("Repository:"), a(href = paste0("https://github.com/", code_repo), code_repo), br())
} else {
repo = tagList(strong("Repository:"), "Not Available", br())
}
if (!is.null(code_doi)) {
archive = tagList(strong("Archive:"), build_doi_badge(code_doi))
} else {
archive = tagList(strong("Archive:"), "Not Available")
}
tags$details(
tags$summary(lock_use, strong(HTML(my_em(bib_data$title)))),
p(),
tags$ul(
tagList(book_img, strong(em("JOURNAL"))),
tags$ul(
p(build_journal_name(bib_data), build_journal_info(bib_data), br(), build_doi_badge(bib_data$doi))
),
tagList(users_img, strong(em("AUTHORS"))),
tags$ul(
p(HTML(my_name_strong(bib_data$authors)))
),
tagList(book_reader_img, strong(em("ABSTRACT"))),
tags$ul(
p(HTML(my_em(bib_data$abstract)), align = "justify")
),
tagList(code_img, strong(em("CODE/DATA"))),
tags$ul(
repo,
archive
),
p(),
tagList(comment_img, strong(em("CITATIONS"))),
tags$ul(
tagList(strong("Crossref: "), bib_data$cites_crossref, br()),
tagList(strong("Google Scholar: "), bib_data$cites_gscholar)
)
),
hr()
)
}
article_details(
key = "quispe-etal-inprep-2025-2",
open_access = FALSE,
code_repo = NULL,
code_doi = NULL
)
# specify R objects that store the HTML code to insert one of the icons used.
# note how each img has two options: one for each light and dark themes
# a closed lock: used for denoting paywall articles/private repos
lock_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock-dark.svg#gh-dark-mode-only", height = "15")
)
# an open lock: used for denoting open-access articles/public repos
open_lock_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock-open.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock-open-dark.svg#gh-dark-mode-only", height = "15")
)
# inline versions of these lock icons
lock_img_inline = HTML("<img src=https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock.svg#gh-light-mode-only height=15/><img src=https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock-dark.svg#gh-dark-mode-only height=15/>")
open_lock_img_inline = HTML("<img src=https://raw.githubusercontent.com/qselmer/qselmer/master/assets/lock-open.svg#gh-light-mode-only height=15/><img src=https://raw.githubusercontent.com/bqselmer/qselmer/master/assets/lock-open-dark.svg#gh-dark-mode-only height=15/>")
# a closed book: used to represent a journal
book_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/book.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/book-dark.svg#gh-dark-mode-only", height = "15")
)
# an open book: used to represent an abstract
book_reader_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/book-reader.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/book-reader-dark.svg#gh-dark-mode-only", height = "15")
)
# code icon: used to represent locations of archived/open source code/data
code_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/code.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/code-dark.svg#gh-dark-mode-only", height = "15")
)
# users icon: used to represent author list
users_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/users.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/users-dark.svg#gh-dark-mode-only", height = "15")
)
# quote icon: used to represent how to cite
quote_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/quote-left.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/quote-left-dark.svg#gh-dark-mode-only", height = "15")
)
# comment icon: used to represent citations
comment_img = tagList(
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/comment.svg#gh-light-mode-only", height = "15"),
img(src = "https://raw.githubusercontent.com/qselmer/qselmer/master/assets/comment-dark.svg#gh-dark-mode-only", height = "15")
)
article_details(
key = "quispe-etal-inprep-2025-2",
open_access = FALSE,
code_repo = NULL,
code_doi = NULL
)
p(em("Click the title of each article to see more information."), open_lock_img, em("and"), lock_img, em("denote open-access and paywall articles, respectively."))
my_em = function(x) {
for (i in 1:length(em_words)) {
x = stringr::str_replace_all(x, em_words[i], paste0("<em>", em_words[i], "</em>"))
}
return(x)
}
my_name_strong = function(x) {
stringr::str_replace(x, "Quispe-Salazar, E.", "<strong>Quispe-Salazar, E.</strong>") %>%
stringr::str_replace("Quispe-Salazar, E.", "<strong>Quispe-Salazar, E.</strong>") %>%
stringr::str_replace("Quispe-Salazar, E.", "<strong>Quispe-Salazar, E.</strong>") %>%
stringr::str_replace("Quispe-Salazar, E.", "<strong>Quispe-Salazar, E.</strong>")
}
prep_bibentry = function(key) {
this_bib = bib[key]
# create a "pretty citation" from the bibentry
old_opts = RefManageR::BibOptions()
on.exit(RefManageR::BibOptions(old_opts))
RefManageR::BibOptions(max.names = 20, style = "text", bib.style = "authoryear", dashed = FALSE)
str_bib = format(this_bib)
# remove any line breaks portion
str_bib = stringr::str_replace_all(str_bib, "\\n",  " ")
str_bib = stringr::str_replace_all(str_bib, "\\\\textendash ",  "&#8211;")
str_bib = stringr::str_remove_all(str_bib, "_")
# extract author list: do it this way so first and middle names are abbreviated
authors = stringr::str_extract(str_bib, "^.+\\([:digit:]") %>%
stringr::str_remove(" \\([:digit:]")
# extract the title: do it this way so capitalization and {} are handled properly
# title = stringr::str_extract(str_bib, "“.+”") %>%
#   substr(2, nchar(.)-1)
title = stringr::str_extract(str_bib, "\\). .+In\\:") %>%
stringr::str_remove("\\). ") %>%
stringr::str_remove(" In\\:$") %>%
substr(2,nchar(.)-2)
# extract the abstract from online
# abstract = tryCatch(rcrossref::cr_abstract(this_bib$doi), error = function(e) "Abstract not found on CrossRef. Consult the DOI link shown above for the abstract.")
abstract = this_bib$abstract
abstract = stringr::str_replace_all(abstract, "\\\\textendash ",  "&#8211;")
abstract = stringr::str_replace_all(abstract, "\\\\textdegree ",  "&#176;")
abstract = stringr::str_replace_all(abstract, "``",  '"')
abstract = stringr::str_replace_all(abstract, "''",  '"')
abstract = stringr::str_replace_all(abstract, "O2 kg-1h-1", "O<sub>2</sub> kg<sup>-1</sup>h<sup>-1</sup>")
abstract = stringr::str_replace_all(abstract, "Topt", "<em>T</em><sub>opt</sub>")
abstract = stringr::str_replace_all(abstract, "Tlow", "<em>T</em><sub>low</sub>")
abstract = stringr::str_replace_all(abstract, "Tup", "<em>T</em><sub>up</sub>")
abstract = stringr::str_replace_all(abstract, "Tbreadth", "<em>T</em><sub>breadth</sub>")
abstract = stringr::str_replace_all(abstract, "\\{\\$<\\$\\}", "&#60;")
abstract = stringr::str_replace_all(abstract, "\\\\%", "%")
# obtain the citation count: cross ref
cites_crossref = rcrossref::cr_citation_count(this_bib$doi)$count
cites_crossref = ifelse(is.null(cites_crossref), NA, cites_crossref)
# obtain the citation count: google scholar
title_join = stringr::str_replace_all(title, "&#8211;", "–")
title_join = stringr::str_replace_all(title_join, "[:punct:]", " ")
cites_gscholar = my_pubs[stringdist::amatch(tolower(title_join), tolower(my_pubs$title)),"cites"]
# build the output list
list(
authors = authors,
title = title,
year = this_bib$year,
journal = this_bib$journal,
volume = this_bib$volume,
number = this_bib$number,
pages = this_bib$pages,
doi = this_bib$doi,
abstract = abstract,
cites_crossref = cites_crossref,
cites_gscholar = cites_gscholar
)
}
build_journal_name = function(bib_data) {
em(paste0(bib_data$journal, ","))
}
build_journal_info = function(bib_data) {
volume_use = ifelse(!is.null(bib_data$volume), bib_data$volume, "")
number_use = ifelse(!is.null(bib_data$number), paste0("(", bib_data$number, ")"), "")
pages_use = ifelse(!is.null(bib_data$pages), bib_data$pages, "")
pages_use = stringr::str_replace(pages_use, "--", "-")
number_pages_sep = ifelse(pages_use == "", "", ": ")
out = paste0(volume_use, number_use, number_pages_sep, pages_use)
if (out == "") {
out = "In Press"
}
return(out)
}
build_doi_badge = function(doi) {
if (!is.null(doi)) {
url = paste0("https://doi.org/", doi)
badge = paste0("https://zenodo.org/badge/DOI/", doi, ".svg")
a(href = url, img(src = badge, alt = "DOI"))
}
}
article_details = function(key, open_access = FALSE, code_repo = NULL, code_doi = NULL) {
# prepare the bibliographic data
bib_data = prep_bibentry(key)
# set the lock image to use
if (open_access) {
lock_use = open_lock_img
} else {
lock_use = lock_img
}
if (!is.null(code_repo)) {
repo = tagList(strong("Repository:"), a(href = paste0("https://github.com/", code_repo), code_repo), br())
} else {
repo = tagList(strong("Repository:"), "Not Available", br())
}
if (!is.null(code_doi)) {
archive = tagList(strong("Archive:"), build_doi_badge(code_doi))
} else {
archive = tagList(strong("Archive:"), "Not Available")
}
tags$details(
tags$summary(lock_use, strong(HTML(my_em(bib_data$title)))),
p(),
tags$ul(
tagList(book_img, strong(em("JOURNAL"))),
tags$ul(
p(build_journal_name(bib_data), build_journal_info(bib_data), br(), build_doi_badge(bib_data$doi))
),
tagList(users_img, strong(em("AUTHORS"))),
tags$ul(
p(HTML(my_name_strong(bib_data$authors)))
),
tagList(book_reader_img, strong(em("ABSTRACT"))),
tags$ul(
p(HTML(my_em(bib_data$abstract)), align = "justify")
),
tagList(code_img, strong(em("CODE/DATA"))),
tags$ul(
repo,
archive
),
p(),
tagList(comment_img, strong(em("CITATIONS"))),
tags$ul(
tagList(strong("Crossref: "), bib_data$cites_crossref, br()),
tagList(strong("Google Scholar: "), bib_data$cites_gscholar)
)
),
hr()
)
}
article_details(
key = "quispe-etal-inprep-2025-2",
open_access = FALSE,
code_repo = NULL,
code_doi = NULL
)
key = "quispe-etal-inprep-2025-2"
open_access = TRUE
code_repo = NULL
code_doi = NULL
# prepare the bibliographic data
bib_data = prep_bibentry(key)
bib
key
1
key = 1
this_bib = bib[key]
this_bib
# create a "pretty citation" from the bibentry
old_opts = RefManageR::BibOptions()
on.exit(RefManageR::BibOptions(old_opts))
RefManageR::BibOptions(max.names = 20, style = "text", bib.style = "authoryear", dashed = FALSE)
str_bib = format(this_bib)
# remove any line breaks portion
str_bib = stringr::str_replace_all(str_bib, "\\n",  " ")
str_bib = stringr::str_replace_all(str_bib, "\\\\textendash ",  "&#8211;")
str_bib = stringr::str_remove_all(str_bib, "_")
# extract author list: do it this way so first and middle names are abbreviated
authors = stringr::str_extract(str_bib, "^.+\\([:digit:]") %>%
stringr::str_remove(" \\([:digit:]")
# extract the title: do it this way so capitalization and {} are handled properly
# title = stringr::str_extract(str_bib, "“.+”") %>%
#   substr(2, nchar(.)-1)
title = stringr::str_extract(str_bib, "\\). .+In\\:") %>%
stringr::str_remove("\\). ") %>%
stringr::str_remove(" In\\:$") %>%
substr(2,nchar(.)-2)
# extract the abstract from online
# abstract = tryCatch(rcrossref::cr_abstract(this_bib$doi), error = function(e) "Abstract not found on CrossRef. Consult the DOI link shown above for the abstract.")
abstract = this_bib$abstract
abstract = stringr::str_replace_all(abstract, "\\\\textendash ",  "&#8211;")
abstract = stringr::str_replace_all(abstract, "\\\\textdegree ",  "&#176;")
abstract = stringr::str_replace_all(abstract, "``",  '"')
abstract = stringr::str_replace_all(abstract, "''",  '"')
abstract = stringr::str_replace_all(abstract, "O2 kg-1h-1", "O<sub>2</sub> kg<sup>-1</sup>h<sup>-1</sup>")
abstract = stringr::str_replace_all(abstract, "Topt", "<em>T</em><sub>opt</sub>")
abstract = stringr::str_replace_all(abstract, "Tlow", "<em>T</em><sub>low</sub>")
abstract = stringr::str_replace_all(abstract, "Tup", "<em>T</em><sub>up</sub>")
abstract = stringr::str_replace_all(abstract, "Tbreadth", "<em>T</em><sub>breadth</sub>")
abstract = stringr::str_replace_all(abstract, "\\{\\$<\\$\\}", "&#60;")
abstract = stringr::str_replace_all(abstract, "\\\\%", "%")
# obtain the citation count: cross ref
cites_crossref = rcrossref::cr_citation_count(this_bib$doi)$count
cites_crossref = ifelse(is.null(cites_crossref), NA, cites_crossref)
# obtain the citation count: google scholar
title_join = stringr::str_replace_all(title, "&#8211;", "–")
title_join = stringr::str_replace_all(title_join, "[:punct:]", " ")
cites_gscholar = my_pubs[stringdist::amatch(tolower(title_join), tolower(my_pubs$title)),"cites"]
# build the output list
list(
authors = authors,
title = title,
year = this_bib$year,
journal = this_bib$journal,
volume = this_bib$volume,
number = this_bib$number,
pages = this_bib$pages,
doi = this_bib$doi,
abstract = abstract,
cites_crossref = cites_crossref,
cites_gscholar = cites_gscholar
)
bib
class(bib)
img(src = "https://github-readme-stats.vercel.app/api?username=qselmer&theme=transparent&line_height=40&rank_icon=github&title_color=000000", alt = "GitHub Stats")
tagList(
div(align = "center",
img(src = "https://github-readme-stats.vercel.app/api/top-langs/?username=qselmer&theme=transparent&langs_count=5", alt = "Top Languages"),
img(src = "https://github-readme-stats.vercel.app/api?username=qselmer&theme=transparent&line_height=40&rank_icon=github&title_color=000000", alt = "GitHub Stats")
)
)
